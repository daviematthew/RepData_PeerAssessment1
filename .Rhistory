my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
swirl()
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,main = "My Plot")
plot(cars,main = "My Plot")
?plot
plot(cars,sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
install.packages("RMySQL",type = "source")
library(RMySQL)
ucscDB <- dbConnect(MySQL(), user="genome",)
ucscDB <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "62df81a2505bfb8da744",
secret = "a7460d45101107c8211415d78f5efda0d765da87")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "62df81a2505bfb8da744",
secret = "a7460d45101107c8211415d78f5efda0d765da87")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
GET("https://github.com/login/oauth/authorize")
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "62df81a2505bfb8da744",
secret = "a7460d45101107c8211415d78f5efda0d765da87")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "62df81a2505bfb8da744",
secret = "230a00d0a49e0f8d87500f4a3f5c020fa8d00a30")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
htmlCode
nchar(htmlCode[10,])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
con = file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode = readLines(con)
head(htmlCode)
sum(htmlCode[,9])
sum(htmlCode[,4])
library(rhdf5)
h5read("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","Nino1+2/SSTA")
install.packages("utils")
install.packages("utils")
library(utils)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
class()
class(x)
sum(x[,4])
nrow(x)
ncol()
ncol(x)
x2 <- x[,4]
x2
sum(x2)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
sum(x[,4])
install.packages("dplyr")
install.packages("plyr")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version) == TRUE)
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- cran, package)
by_package <- groupby(cran, package)
by_package <- group_by(cran, package)
by_packageg
by_package
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
View(top_unique)
top_counts_sorted <- arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(date = res, col = sex_class, into = c("sex","class"))
separate(data = res, col = sex_class, into = c("sex","class"))
submit()
students3
?gather
submit()
submit()
submit()
?spread
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
?unique
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
install.packages("Shiny")
install.packages("shiny")
install.packages("knitr")
)
library(shiny)
library(knitr)
install.packages("pandoc")
ls()
eBay_Red <- rgb(255,0,0)
eBay_Blue <- rgb(0,112,192)
eBay_Orange <- rgb(255,192,0)
eBay_Green <- rgb(112,173,71)
eBay_Grey <- rgb(165,165,165)
eBay_Red <- rgb(255,0,0, maxColorValue = 255)
eBay_Blue <- rgb(0,112,192, maxColorValue = 255)
eBay_Orange <- rgb(255,192,0, maxColorValue = 255)
eBay_Green <- rgb(112,173,71, maxColorValue = 255)
eBay_Grey <- rgb(165,165,165, maxColorValue = 255)
x <- rnorm(100)
plot(x, col = eBay_Orange)
library(lattice)
histogram(x, col = eBay_Green)
histogram(x, col = eBay_Blue)
histogram(x, col = eBay_Grey)
histogram(x, col = eBay_REd)
histogram(x, col = eBay_Red)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx,newCy)
apply(distTmp2m, 2, which.min)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
svd1$u%*%svd1$v*(svd1$d[1])
a1 <- svd1$u[,1]%*%svd1$v[,1]*svd1$d[1]
a1 <- svd1$u[,1]%*%t(svd1$v[,1])*svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2]%*%svd1$v[,1:2]%*%diag(svd1$d[1:2])
a2 <- svd1$u[,1:2]%*%t(svd1$v[,1:2])%*%diag(svd1$d[1:2])
a2 <- svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
DPS <- read.delim("C:\\Users\\mdavie\\Desktop\\DPS Scores\\2017\\01\\08\\part-00000.txt")
DPS <- read.delim("C:\\Users\\mdavie\\Desktop\\DPS Scores\\2017\\01\\08\\part-00000")
head(DPS)
?read.delim
names(DPS) <- c("SLR_ID","DPS")
library(dplyr)
?filter
DPS2 <- filter(DPS, DPS$SLR_ID == 372464643 | DPS$SLR_ID == 84781784)
DPS2
library(dplyr)
dps <- read.delim("C:\\Users\\mdavie\\Desktop\\DPS Scores\\2017\\02\\08\\part-00000",header=FALSE)
?filter
colnames(dps) <- c("SLR_ID","Score")
head(dps)
filter(dps, dps$SLR_ID == 11338718 | dps$SLR_ID == 58797631 | dps$SLR_ID == 176838)
library(dplyr)
dps <- read.delim("C:\\Users\\mdavie\\Desktop\\DPS Scores\\2017\\02\\08\\part-00000",header = FALSE)
library(xlsx)
colnames(dps) <- c("ORACLE_ID","DPS_SCORE")
slr_list <- read.xlsx("C:\\Users\\mdavie\\Desktop\\RVS Population Reviews\\Feb17_DE_RVS\\DE_RVS_eBayPlus_150217.xlsx", sheetName = "Sheet 1",header = TRUE)
slr_list <- read.xlsx("C:\\Users\\mdavie\\Desktop\\RVS Population Reviews\\Feb17_DE_RVS\\DE_RVS_eBayPlus_150217.xlsx", sheetIndex = 2,header = TRUE)
head(slr_list)
?merge
cmbnd_list <- merge(dps, slr_list, by = "ORACLE_ID")
cmbnd_list <- merge(slr_list, dps, by = "ORACLE_ID", all.x = TRUE)
write.xlsx(cmbnd_list, "C:\\Users\\mdavie\\Desktop\\RVS Population Reviews\\Feb17_DE_RVS\\List.xlsx")
dps <- read.delim("C:\\Users\\mdavie\\Desktop\\DPS Scores\\2017\\02\\08\\part-00000", header = TRUE)
colnames(dps) <- c("SLR_ID","DPS")
head(dps)
dps[SLR_ID == 1089189827,]
dps[dps$SLR_ID == 1089189827,]
dps[dps$SLR_ID == 113414497,]
dps[dps$SLR_ID == 1005403881,]
dps[dps$SLR_ID == 22859988
,]
dps[dps$SLR_ID == 1285654696
,]
dps[dps$SLR_ID == 228176718,]
dps[dps$SLR_ID == 2982166,]
dps[dps$SLR_ID == 1068757143,]
dps[dps$SLR_ID == 24159830,]
dps[dps$SLR_ID == 1146698716,]
dps[dps$SLR_ID == 1129210695,]
dps[dps$SLR_ID == 4298621,]
dps[dps$SLR_ID == 304144893,]
dps[dps$SLR_ID == 762720924,]
dps[dps$SLR_ID == 661648536,]
dps[dps$SLR_ID == 38554706,]
dps[dps$SLR_ID == 81630857,]
dps[dps$SLR_ID == 5827632,]
setwd("C:\\Users\\mdavie\\Desktop\\RepData_PeerAssessment1")
read.csv(".\\activity\\activity.csv")
read.csv(".\\activity\\activity.csv")
raw.data <- read.csv(".\\activity\\activity.csv")
head(raw.data)
mean(raw.data$steps)
mean(!is.na(raw.data$steps))
str(raw.data)
hist(!is.na(raw.data$steps  ))
hist(sum(!is.na(raw.data$steps))
hist(sum(!is.na(raw.data$steps))
hist(sum(!is.na(raw.data$steps))
library(dplyr)
?summarise
daily.steps <- raw.data %>% group_by(date)
daily.steps <- raw.data %>%
group_by(date) %>%
summarise(sumSteps = sum(steps))
daily.steps
daily.steps <- raw.data %>%
group_by(date) %>%
summarise(sumSteps = sum(steps, rm.na = TRUE))
daily.steps
?hist
hist(daily.steps)
hist(daily.steps$sumSteps)
?hist
mean(daily.steps$sumSteps, na.rm = TRUE)
interval.steps <- raw.data %>%
group_by(interval) %>%
summarise(avgSteps = mean(steps, na.rm = TRUE))
head(interval.steps)
plot(interval.steps$interval,)
plot(interval.steps$interval, interval.steps$avgSteps)
plot(interval.steps$interval, interval.steps$avgSteps, type = 'l')
sapply(raw.data,function(x) sum(is.na(x)))
raw.data2 <- raw.data
head(interval)
head(interval.steps)
raw.data3 <- raw.data2[is.na(raw.data2$steps),]
raw.data3 <- merge(raw.data3, interval.steps, by = 'interval', all.x = TRUE)
head(raw.data3)
raw.data3$steps <- raw.data3$avgSteps
head(raw.data3)
raw.data3 <- raw.data3[,1:3]
raw.data2 <- raw.data2[!is.na(raw.data2$steps),]
raw.data.new <- rbind(raw.data2, raw.data3)
sum(daily.steps$sumSteps)
sum(daily.steps$sumSteps, na.rm = TRUE)
head(raw.data.new)
head(raw.data.new,30)
head(raw.data.new,50)
head(raw.data.new,100)
head(raw.data.new,200)
sum(raw.data.new[date==2012-10-02,]$steps)
sum(raw.data.new[date=="2012-10-02",]$steps)
tail(raw.data.new)
weekdays(raw.data.new$date)
?weekdays
str(raw.data.new)
raw.data.new$date <- as.POSIXlt(raw.data.new$date)
str(raw.data.new)
weekdays(raw.data.new$date)
if(weekdays(raw.data.new$date == "Saturday") |
weekdays(raw.data.new$date == "Sunday")){
raw.data.new$day.type == "Weekends"
} else {
raw.data.new$day.type == "Weekdays"
}
if(weekdays(raw.data.new$date) == "Saturday" |
weekdays(raw.data.new$date) == "Sunday"){
raw.data.new$day.type == "Weekends"
} else {
raw.data.new$day.type == "Weekdays"
}
for x in raw.data.new{
if(weekdays(raw.data.new$date) == "Saturday" |
weekdays(raw.data.new$date) == "Sunday"){
raw.data.new$day.type == "Weekends"
} else {
raw.data.new$day.type == "Weekdays"
}
raw.data.new$day.type = ifelse((weekdays(raw.data.new$date) == "Saturday"                                 | weekdays(raw.data.new$date) == "Sunday"),
"Weekend",
"Weekday")
head(raw.data.new)
day.interval.steps <- raw.data.new %>%
group_by(day.type, interval) %>%
summarise(avgSteps = mean(steps, na.rm = TRUE))
day.interval.steps <- raw.data.new[,c(1,3,4)] %>%
group_by(day.type, interval) %>%
summarise(avgSteps = mean(steps, na.rm = TRUE))
head(day.interval.steps)
?plot
library(lattice)
xyplot(day.interval.steps$avgSteps~day.interval.steps$interval | day.interval.steps$day.type)
xyplot(day.interval.steps$avgSteps~day.interval.steps$interval | day.interval.steps$day.type, type = "l")
xyplot(day.interval.steps$avgSteps~day.interval.steps$interval | day.interval.steps$day.type, type = "l", xlab = "Interval",ylab = "Number of Steps")
xyplot(avgSteps~interval | day.type, data = day.interval.steps, type = "l", xlab = "Interval",ylab = "Number of Steps", layout(c(1,2)))
xyplot(avgSteps~interval | day.type, data = day.interval.steps, type = "l", xlab = "Interval",ylab = "Number of Steps", layout(c(2,1)))
xyplot(avgSteps~interval | day.type, data = day.interval.steps, type = "l", xlab = "Interval",ylab = "Number of Steps", layout(c(2,1)))
xyplot(avgSteps~interval | day.type, data = day.interval.steps, type = "l", xlab = "Interval",ylab = "Number of Steps", layout(c(1,2)))
xyplot(avgSteps~interval | day.type, data = day.interval.steps, type = "l", xlab = "Interval",ylab = "Number of Steps", layout=(c(1,2)))
xyplot(avgSteps~interval | day.type, data = day.interval.steps, type = "l", xlab = "Interval",ylab = "Number of Steps", layout=(c(2,1)))
library(knitr)
?knit2html
knit2html("Pa1_template.Rmd")
knit2html("PA1_template.Rmd")
library(rmarkdown)
render("PA1_template.Rmd")
knit("PA1_template.Rmd")
